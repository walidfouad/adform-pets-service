{"version":3,"sources":["../../src/data/data-format.js"],"names":["formatDataRow","dataRow","formatedData","type","console","log","toLowerCase","Owner","id","name","address","phone","email","Dog","colour","age","breed","ownerId","Cat","toJSON","formatData","modelDataArray","formatedDataArray","async","forEach","modelDataRow","push","sort","a","b"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;;;;;AAEA,IAAMA,gBAAgB,SAAhBA,aAAgB,CAACC,OAAD,EAAa;AAC/B,QAAIC,eAAe,EAAnB;;AAEA,QAAI,CAACD,QAAQE,IAAb,EAAmB;AACfC,gBAAQC,GAAR,CAAY,kDAAZ;;AAEA,eAAOH,YAAP;AACH;;AAED,YAAQD,QAAQE,IAAR,CAAaG,WAAb,EAAR;AACI,aAAK,OAAL;AACIJ,2BAAe,IAAIK,eAAJ,CAAUN,QAAQO,EAAlB,EACXP,QAAQQ,IADG,EAEXR,QAAQS,OAFG,EAGXT,QAAQU,KAHG,EAIXV,QAAQW,KAJG,CAAf;AAKA;AACJ,aAAK,KAAL;AACIV,2BAAe,IAAIW,aAAJ,CAAQZ,QAAQO,EAAhB,EACXP,QAAQQ,IADG,EAEXR,QAAQa,MAFG,EAGXb,QAAQc,GAHG,EAIXd,QAAQe,KAJG,EAKXf,QAAQgB,OALG,CAAf;AAMA;AACJ,aAAK,KAAL;AACIf,2BAAe,IAAIgB,aAAJ,CAAQjB,QAAQO,EAAhB,EACXP,QAAQQ,IADG,EAEXR,QAAQa,MAFG,EAGXb,QAAQc,GAHG,EAIXd,QAAQe,KAJG,EAKXf,QAAQgB,OALG,CAAf;AAMA;AACJ;AACI,mBAAO,EAAP;;AAzBR;;AA6BA,WAAOf,aAAaiB,MAAb,EAAP;AACH,CAvCD;;AA0CA,IAAMC,aAAa,SAAbA,UAAa,CAACC,cAAD,EAAoB;;AAEnC,QAAIC,oBAAoB,EAAxB;AACAC,oBAAMC,OAAN,CAAcH,cAAd,EAA8B,UAACI,YAAD,EAAkB;AAC5CH,0BAAkBI,IAAlB,CAAuB1B,cAAcyB,YAAd,CAAvB;AACH,KAFD;;AAIA;AACA;;AAEA;AACAH,sBAAkBK,IAAlB,CAAuB,UAACC,CAAD,EAAIC,CAAJ;AAAA,eAAWD,EAAEpB,EAAF,GAAOqB,EAAErB,EAAV,GAAgB,CAAhB,GAAqBoB,EAAEzB,IAAF,KAAW0B,EAAE1B,IAAd,GAAsB,CAAtB,GAA0B,CAAC,CAAzD;AAAA,KAAvB;;AAEA,WAAOmB,iBAAP;AACH,CAdD;;QAgBStB,a,GAAAA,a;kBACMoB,U","file":"data-format.js","sourcesContent":["import Owner from '../model/owner/owner.model';\r\nimport Dog from '../model/pet/dog.model';\r\nimport Cat from '../model/pet/cat.model';\r\n\r\nimport async from 'async';\r\n\r\nconst formatDataRow = (dataRow) => {\r\n    let formatedData = {};\r\n\r\n    if (!dataRow.type) {\r\n        console.log('MISSING FILED. Data row does not include a type.');\r\n\r\n        return formatedData;\r\n    }\r\n\r\n    switch (dataRow.type.toLowerCase()) {\r\n        case 'owner':\r\n            formatedData = new Owner(dataRow.id,\r\n                dataRow.name,\r\n                dataRow.address,\r\n                dataRow.phone,\r\n                dataRow.email);\r\n            break;\r\n        case 'dog':\r\n            formatedData = new Dog(dataRow.id,\r\n                dataRow.name,\r\n                dataRow.colour,\r\n                dataRow.age,\r\n                dataRow.breed,\r\n                dataRow.ownerId);\r\n            break;\r\n        case 'cat':\r\n            formatedData = new Cat(dataRow.id,\r\n                dataRow.name,\r\n                dataRow.colour,\r\n                dataRow.age,\r\n                dataRow.breed,\r\n                dataRow.ownerId);\r\n            break;\r\n        default:\r\n            return {};\r\n\r\n    }\r\n\r\n    return formatedData.toJSON();\r\n};\r\n\r\n\r\nconst formatData = (modelDataArray) => {\r\n\r\n    let formatedDataArray = [];\r\n    async.forEach(modelDataArray, (modelDataRow) => {\r\n        formatedDataArray.push(formatDataRow(modelDataRow));\r\n    });\r\n\r\n    // sort by id\r\n    // formatedDataArray.sort((a, b) => (a.id > b.id) ? 1 : -1);\r\n\r\n    // sort by id and then by type\r\n    formatedDataArray.sort((a, b) => (a.id > b.id) ? 1 : (a.type === b.type) ? 1 : -1);\r\n\r\n    return formatedDataArray;\r\n};\r\n\r\nexport { formatDataRow };\r\nexport default formatData;"]}