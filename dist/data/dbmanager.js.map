{"version":3,"sources":["../../src/data/dbmanager.js"],"names":["dbDirectory","path","join","appRoot","DBManager","modelTypes","Promise","resolve","reject","length","Error","result","forEach","modelType","modelData","loadModelFile","toLowerCase","concat","modelId","aModel","_","find","id","inputData","type","newModel","push","writeModelFile","oldModelIndex","findIndex","modelFilePath","fs","existsSync","modelBuffer","readFileSync","JSON","parse","writeFileSync","stringify","dogs","getDogs","cats","getCats","pets","oId","getPets","fPets","filter","ownerId","owners","getOwners","owner"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;;;;;AAEA,IAAMA,cAAcC,eAAKC,IAAL,CAAUC,sBAAQF,IAAlB,EAAwB,WAAxB,CAApB;;IAEqBG,S;AAEjB,yBAAc;AAAA;AAAE;;;;mCAELC,U,EAAY;AAAA;;AACnB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,oBAAI,CAACH,UAAD,IAAeA,WAAWI,MAAX,KAAsB,CAAzC,EAA4C;AACxC,2BAAOD,OAAO,IAAIE,KAAJ,CAAU,0BAAV,CAAP,CAAP;AACH;;AAED,oBAAIC,SAAS,EAAb;AACAN,2BAAWO,OAAX,CAAmB,UAACC,SAAD,EAAe;AAC9B,wBAAIA,aAAaA,cAAc,EAA/B,EAAmC;AAC/B,4BAAMC,YAAY,MAAKC,aAAL,CAAmBF,UAAUG,WAAV,EAAnB,CAAlB;AACAL,iCAASA,OAAOF,MAAP,KAAkB,CAAlB,GAAsBE,SAASG,SAA/B,GAA2CH,OAAOM,MAAP,CAAcH,SAAd,CAApD;AACH;AACJ,iBALD;;AAOAP,wBAAQI,MAAR;AACH,aAdM,CAAP;AAgBH;;;0CAEiBO,O,EAASL,S,EAAW;AAAA;;AAClC,mBAAO,IAAIP,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,oBAAI,CAACK,SAAD,IAAcA,UAAUJ,MAAV,KAAqB,CAAvC,EAA0C;AACtC,2BAAOD,OAAO,IAAIE,KAAJ,CAAU,yBAAV,CAAP,CAAP;AACH;;AAED,oBAAMI,YAAY,OAAKC,aAAL,CAAmBF,UAAUG,WAAV,EAAnB,CAAlB;AACA,oBAAMG,SAASC,iBAAEC,IAAF,CAAOP,SAAP,EAAkB,EAAEQ,IAAIJ,OAAN,EAAlB,CAAf;;AAEAX,wBAAQY,MAAR;AACH,aATM,CAAP;AAWH;;;uCAEcI,S,EAAW;AAAA;;AACtB,mBAAO,IAAIjB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,oBAAMK,YAAYU,UAAUC,IAAV,CAAeR,WAAf,EAAlB;AACA,oBAAMM,KAAK,kBAAX;AACAC,0BAAUD,EAAV,GAAeA,EAAf;;AAEA,oBAAMG,WAAW,+BAAcF,SAAd,CAAjB;;AAEA,oBAAIT,YAAY,OAAKC,aAAL,CAAmBF,SAAnB,CAAhB;;AAEA;AACAC,0BAAUY,IAAV,CAAeD,QAAf;;AAEA;AACA,uBAAKE,cAAL,CAAoBd,SAApB,EAA+BC,SAA/B;;AAEAP,wBAAQkB,QAAR;AACH,aAhBM,CAAP;AAiBH;;;oCAEWP,O,EAASK,S,EAAW;AAAA;;AAC5B,mBAAO,IAAIjB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,oBAAMK,YAAYU,UAAUC,IAAV,CAAeR,WAAf,EAAlB;;AAEAO,0BAAUD,EAAV,GAAeJ,OAAf;;AAEA,oBAAMO,WAAW,+BAAcF,SAAd,CAAjB;;AAEA,oBAAIT,YAAY,OAAKC,aAAL,CAAmBF,SAAnB,CAAhB;;AAEA,oBAAMe,gBAAgBR,iBAAES,SAAF,CAAYf,SAAZ,EAAuB,EAAEQ,IAAIJ,OAAN,EAAvB,CAAtB;AACA;AACAJ,0BAAUc,aAAV,IAA2BH,QAA3B;;AAEA;AACA,uBAAKE,cAAL,CAAoBd,SAApB,EAA+BC,SAA/B;;AAEAP,wBAAQkB,QAAR;AACH,aAjBM,CAAP;AAkBH;;;sCAEaZ,S,EAAW;;AAErB,gBAAMiB,gBAAgB7B,eAAKC,IAAL,CAAUF,WAAV,EAAuBa,SAAvB,IAAoC,OAA1D;AACA,gBAAI,CAACkB,aAAGC,UAAH,CAAcF,aAAd,CAAL,EAAmC;AAC/B,uBAAO,EAAP;AACH;;AAED,gBAAMG,cAAcF,aAAGG,YAAH,CAAgBJ,aAAhB,CAApB;;AAEA,gBAAMhB,YAAamB,eAAeA,YAAYxB,MAAZ,GAAqB,CAArC,GAA0C0B,KAAKC,KAAL,CAAWH,WAAX,CAA1C,GAAoE,EAAtF;;AAEA,mBAAOnB,SAAP;AACH;;;uCAEcD,S,EAAWC,S,EAAW;AACjC,gBAAMgB,gBAAgB7B,eAAKC,IAAL,CAAUF,WAAV,EAAuBa,SAAvB,IAAoC,OAA1D;AACAkB,yBAAGM,aAAH,CAAiBP,aAAjB,EAAgCK,KAAKG,SAAL,CAAexB,SAAf,CAAhC;AACH;;;oCAEW;AACR,mBAAO,KAAKC,aAAL,CAAmB,OAAnB,CAAP;AACH;;;kCAES;AACN,mBAAO,KAAKA,aAAL,CAAmB,KAAnB,CAAP;AACH;;;kCAES;AACN,mBAAO,KAAKA,aAAL,CAAmB,KAAnB,CAAP;AACH;;;kCAES;AACN,gBAAMwB,OAAO,KAAKC,OAAL,EAAb;AACA,gBAAMC,OAAO,KAAKC,OAAL,EAAb;AACA,gBAAIC,OAAO,EAAX;AACAA,mBAAOJ,KAAKtB,MAAL,CAAYwB,IAAZ,CAAP;;AAEA,mBAAOE,IAAP;AACH;;;kCAESC,G,EAAK;AACX,gBAAMD,OAAO,KAAKE,OAAL,EAAb;AACA,gBAAMC,QAAQ1B,iBAAE2B,MAAF,CAASJ,IAAT,EAAe,EAAEK,SAASJ,GAAX,EAAf,CAAd;;AAEA,mBAAOE,KAAP;AACH;;;iCAEQF,G,EAAK;AACV,gBAAMK,SAAS,KAAKC,SAAL,EAAf;AACA,gBAAMC,QAAQ/B,iBAAEC,IAAF,CAAO4B,MAAP,EAAe,EAAE3B,IAAIsB,GAAN,EAAf,CAAd;;AAEA,mBAAOO,KAAP;AACH;;;;;;kBAlIgB/C,S","file":"dbmanager.js","sourcesContent":["import appRoot from 'app-root-path';\r\nimport uuidv4 from 'uuid/v4';\r\nimport path from 'path';\r\nimport _ from 'lodash';\r\nimport fs from 'fs';\r\n\r\nimport formatData, { formatDataRow } from './dataformat';\r\n\r\nconst dbDirectory = path.join(appRoot.path, 'json_data');\r\n\r\nexport default class DBManager {\r\n\r\n    constructor() {}\r\n\r\n    readModels(modelTypes) {\r\n        return new Promise((resolve, reject) => {\r\n            if (!modelTypes || modelTypes.length === 0) {\r\n                return reject(new Error('No model Types provided.'));\r\n            }\r\n\r\n            let result = [];\r\n            modelTypes.forEach((modelType) => {\r\n                if (modelType && modelType !== '') {\r\n                    const modelData = this.loadModelFile(modelType.toLowerCase());\r\n                    result = result.length === 0 ? result = modelData : result.concat(modelData);\r\n                }\r\n            });\r\n\r\n            resolve(result);\r\n        });\r\n\r\n    }\r\n\r\n    readSpecificModel(modelId, modelType) {\r\n        return new Promise((resolve, reject) => {\r\n            if (!modelType || modelType.length === 0) {\r\n                return reject(new Error('No model Type provided.'));\r\n            }\r\n\r\n            const modelData = this.loadModelFile(modelType.toLowerCase());\r\n            const aModel = _.find(modelData, { id: modelId });\r\n\r\n            resolve(aModel);\r\n        });\r\n\r\n    }\r\n\r\n    createNewModel(inputData) {\r\n        return new Promise((resolve, reject) => {\r\n            const modelType = inputData.type.toLowerCase();\r\n            const id = uuidv4();\r\n            inputData.id = id;\r\n\r\n            const newModel = formatDataRow(inputData);\r\n\r\n            let modelData = this.loadModelFile(modelType);\r\n\r\n            // Now insert the new record into modelData array\r\n            modelData.push(newModel);\r\n\r\n            // here write to model file in json db directory\r\n            this.writeModelFile(modelType, modelData);\r\n\r\n            resolve(newModel);\r\n        });\r\n    }\r\n\r\n    updateModel(modelId, inputData) {\r\n        return new Promise((resolve, reject) => {\r\n            const modelType = inputData.type.toLowerCase();\r\n\r\n            inputData.id = modelId;\r\n\r\n            const newModel = formatDataRow(inputData);\r\n\r\n            let modelData = this.loadModelFile(modelType);\r\n\r\n            const oldModelIndex = _.findIndex(modelData, { id: modelId });\r\n            // Now insert the new record into modelData array\r\n            modelData[oldModelIndex] = newModel;\r\n\r\n            // here write to model file in json db directory\r\n            this.writeModelFile(modelType, modelData);\r\n\r\n            resolve(newModel);\r\n        });\r\n    }\r\n\r\n    loadModelFile(modelType) {\r\n\r\n        const modelFilePath = path.join(dbDirectory, modelType) + '.json';\r\n        if (!fs.existsSync(modelFilePath)) {\r\n            return [];\r\n        }\r\n\r\n        const modelBuffer = fs.readFileSync(modelFilePath);\r\n\r\n        const modelData = (modelBuffer && modelBuffer.length > 0) ? JSON.parse(modelBuffer) : [];\r\n\r\n        return modelData;\r\n    }\r\n\r\n    writeModelFile(modelType, modelData) {\r\n        const modelFilePath = path.join(dbDirectory, modelType) + '.json';\r\n        fs.writeFileSync(modelFilePath, JSON.stringify(modelData));\r\n    }\r\n\r\n    getOwners() {\r\n        return this.loadModelFile('OWNER');\r\n    }\r\n\r\n    getDogs() {\r\n        return this.loadModelFile('DOG');\r\n    }\r\n\r\n    getCats() {\r\n        return this.loadModelFile('CAT');\r\n    }\r\n\r\n    getPets() {\r\n        const dogs = this.getDogs();\r\n        const cats = this.getCats();\r\n        let pets = [];\r\n        pets = dogs.concat(cats);\r\n\r\n        return pets;\r\n    }\r\n\r\n    ownerPets(oId) {\r\n        const pets = this.getPets();\r\n        const fPets = _.filter(pets, { ownerId: oId });\r\n\r\n        return fPets;\r\n    }\r\n\r\n    getOwner(oId) {\r\n        const owners = this.getOwners();\r\n        const owner = _.find(owners, { id: oId });\r\n\r\n        return owner;\r\n    }\r\n}"]}