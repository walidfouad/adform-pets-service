{"version":3,"sources":["../../src/data/dbmanager.js"],"names":["dbDirectory","DbManager","data","Promise","resolve","reject","modelTypes","length","Error","result","forEach","modelType","modelData","loadModelFile","toLowerCase","concat","inputData","type","id","newModel","push","writeModelFile","loadModel","modelFilePath","fs","existsSync","modelBuffer","readFileSync","JSON","parse","writeFileSync","stringify"],"mappings":";;;;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AAEA;;;;AACA;;;;;;AAEA,IAAMA,cAAc,uBAAY,WAAZ,CAApB;;IAEqBC,S;AAEjB,yBAAc;AAAA;;AACV,aAAKC,IAAL,GAAY,EAAZ;AACH;;;;mCAEU;AAAA;;AACP,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC;AACA;;;AAGAD,wBAAQ,MAAKF,IAAb;AACH,aANM,CAAP;AAOH;;;oCAEW;AAAA;;AACR,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC;AACA,gCAAKL,WAAL;AACA;;AAEAI,wBAAQ,OAAKF,IAAb;AACH,aANM,CAAP;AAQH;;;mCAEUI,U,EAAY;AAAA;;AACnB,mBAAO,IAAIH,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,oBAAI,CAACC,UAAD,IAAeA,WAAWC,MAAX,KAAsB,CAAzC,EAA4C;AACxC,2BAAOF,OAAO,IAAIG,KAAJ,CAAU,wBAAV,CAAP,CAAP;AACH;AACD,oBAAIC,SAAS,EAAb;AACAH,2BAAWI,OAAX,CAAmB,UAACC,SAAD,EAAe;AAC9B,wBAAIA,aAAaA,cAAc,EAA/B,EAAmC;AAC/B,4BAAMC,YAAY,OAAKC,aAAL,CAAmBF,UAAUG,WAAV,EAAnB,CAAlB;AACAL,iCAASA,OAAOF,MAAP,KAAkB,CAAlB,GAAsBE,SAASG,SAA/B,GAA2CH,OAAOM,MAAP,CAAcH,SAAd,CAApD;AACH;AACJ,iBALD;;AAOAR,wBAAQK,MAAR;AACH,aAbM,CAAP;AAeH;;;kCAESO,S,EAAW;AAAA;;AACjB,mBAAO,IAAIb,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,oBAAMM,YAAYK,UAAUC,IAAV,CAAeH,WAAf,EAAlB;AACA,oBAAMI,KAAK,kBAAX;AACAF,0BAAUE,EAAV,GAAeA,EAAf;AACA,oBAAMC,WAAW,+BAAcH,SAAd,CAAjB;;AAEA,oBAAIJ,YAAY,OAAKC,aAAL,CAAmBF,SAAnB,CAAhB;;AAEA;AACAC,0BAAUQ,IAAV,CAAeD,QAAf;;AAEA;AACA,uBAAKE,cAAL,CAAoBV,SAApB,EAA+BC,SAA/B;;AAGAR,wBAAQe,QAAR;AACH,aAhBM,CAAP;AAiBH;;;oCAEW;AACR,mBAAOG,UAAU,OAAV,CAAP;AACH;;;kCAES;AACN,mBAAOA,UAAU,KAAV,CAAP;AACH;;;kCAES;AACN,mBAAOA,UAAU,KAAV,CAAP;AACH;;;sCAEaX,S,EAAW;;AAErB,gBAAMY,gBAAgB,oBAASvB,WAAT,EAAsBW,SAAtB,IAAmC,OAAzD;AACA,gBAAI,CAACa,aAAGC,UAAH,CAAcF,aAAd,CAAL,EAAmC;AAC/B,uBAAO,EAAP;AACH;;AAED,gBAAMG,cAAcF,aAAGG,YAAH,CAAgBJ,aAAhB,CAApB;;AAEA,gBAAMX,YAAac,eAAeA,YAAYnB,MAAZ,GAAqB,CAArC,GAA0CqB,KAAKC,KAAL,CAAWH,WAAX,CAA1C,GAAoE,EAAtF;;AAEA,mBAAOd,SAAP;AACH;;;uCAEcD,S,EAAWC,S,EAAW;AACjC,gBAAMW,gBAAgB,oBAASvB,WAAT,EAAsBW,SAAtB,IAAmC,OAAzD;AACAa,yBAAGM,aAAH,CAAiBP,aAAjB,EAAgCK,KAAKG,SAAL,CAAenB,SAAf,CAAhC;AACH;;;;;;kBA9FgBX,S","file":"dbmanager.js","sourcesContent":["import { mdir, projectPath, pathJoin } from '../utils/path';\r\nimport uuidv4 from 'uuid/v4';\r\nimport Owner from '../model/owner/owner.model';\r\nimport Dog from '../model/pet/dog.model';\r\nimport Cat from '../model/pet/cat.model';\r\n\r\nimport formatData, { formatDataRow } from './dataformat';\r\n\r\nimport fs from 'fs';\r\nimport { load } from 'protobufjs';\r\n\r\nconst dbDirectory = projectPath('json_data');\r\n\r\nexport default class DbManager {\r\n\r\n    constructor() {\r\n        this.data = {};\r\n    }\r\n\r\n    readData() {\r\n        return new Promise((resolve, reject) => {\r\n            // read all json db files\r\n            // here should update data from json files \r\n\r\n\r\n            resolve(this.data);\r\n        });\r\n    }\r\n\r\n    writeData() {\r\n        return new Promise((resolve, reject) => {\r\n            // ensure db directory exists\r\n            mdir(dbDirectory);\r\n            // steps to save\r\n\r\n            resolve(this.data);\r\n        });\r\n\r\n    }\r\n\r\n    readModels(modelTypes) {\r\n        return new Promise((resolve, reject) => {\r\n            if (!modelTypes || modelTypes.length === 0) {\r\n                return reject(new Error('No modelType provided.'));\r\n            }\r\n            let result = [];\r\n            modelTypes.forEach((modelType) => {\r\n                if (modelType && modelType !== '') {\r\n                    const modelData = this.loadModelFile(modelType.toLowerCase());\r\n                    result = result.length === 0 ? result = modelData : result.concat(modelData);\r\n                }\r\n            });\r\n\r\n            resolve(result);\r\n        });\r\n\r\n    }\r\n\r\n    saveModel(inputData) {\r\n        return new Promise((resolve, reject) => {\r\n            const modelType = inputData.type.toLowerCase();\r\n            const id = uuidv4();\r\n            inputData.id = id;\r\n            const newModel = formatDataRow(inputData);\r\n\r\n            let modelData = this.loadModelFile(modelType);\r\n\r\n            // Now insert the new record into modelData array\r\n            modelData.push(newModel);\r\n\r\n            // here write to model file in json db directory\r\n            this.writeModelFile(modelType, modelData);\r\n\r\n\r\n            resolve(newModel);\r\n        });\r\n    }\r\n\r\n    getOwners() {\r\n        return loadModel('OWNER');\r\n    }\r\n\r\n    getDogs() {\r\n        return loadModel('DOG');\r\n    }\r\n\r\n    getCats() {\r\n        return loadModel('CAT');\r\n    }\r\n\r\n    loadModelFile(modelType) {\r\n\r\n        const modelFilePath = pathJoin(dbDirectory, modelType) + '.json';\r\n        if (!fs.existsSync(modelFilePath)) {\r\n            return [];\r\n        }\r\n\r\n        const modelBuffer = fs.readFileSync(modelFilePath);\r\n\r\n        const modelData = (modelBuffer && modelBuffer.length > 0) ? JSON.parse(modelBuffer) : [];\r\n\r\n        return modelData;\r\n    }\r\n\r\n    writeModelFile(modelType, modelData) {\r\n        const modelFilePath = pathJoin(dbDirectory, modelType) + '.json';\r\n        fs.writeFileSync(modelFilePath, JSON.stringify(modelData));\r\n    }\r\n}"]}