{"version":3,"sources":["../../src/schema/resolvers.js"],"names":["db","PETSDB","resolvers","Pet","__resolveType","pet","context","info","type","Query","getOwners","root","args","Promise","resolve","reject","readModels","then","owners","catch","err","getPets","pets","getOwnerPets","ownerId","filteredPets","_","filter","Mutation","addPet","input","saveModel","model","updatePet","petId","console","log"],"mappings":";;;;;;AAAA;;;;AACA;;;;AAEA;;;;;;AAEA,IAAMA,KAAK,IAAIC,mBAAJ,EAAX;;AAEA,IAAMC,YAAY;AACdC,SAAK;AACDC,qBADC,yBACaC,GADb,EACkBC,OADlB,EAC2BC,IAD3B,EACiC;AAC9B,gBAAIF,IAAIG,IAAJ,KAAa,KAAjB,EAAwB;AACpB,uBAAO,KAAP;AACH;;AAED,gBAAIH,IAAIG,IAAJ,KAAa,KAAjB,EAAwB;AACpB,uBAAO,KAAP;AACH;;AAED,mBAAO,IAAP;AACH;AAXA,KADS;AAcdC,WAAO;AACHC,mBAAW,mBAACC,IAAD,EAAOC,IAAP,EAAaN,OAAb,EAAsBC,IAAtB,EAA+B;AACtC,mBAAO,IAAIM,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCf,mBAAGgB,UAAH,CAAc,CAAC,OAAD,CAAd,EACKC,IADL,CACU,UAACC,MAAD,EAAY;AACdJ,4BAAQI,MAAR;AACH,iBAHL,EAGOC,KAHP,CAGa,UAACC,GAAD,EAAS;AACdL,2BAAOK,GAAP;AACH,iBALL;AAMH,aAPM,CAAP;AAQH,SAVE;AAWHC,iBAAS,iBAACV,IAAD,EAAOC,IAAP,EAAaN,OAAb,EAAsBC,IAAtB,EAA+B;AACpC,mBAAO,IAAIM,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCf,mBAAGgB,UAAH,CAAc,CAAC,KAAD,EAAQ,KAAR,CAAd,EACKC,IADL,CACU,UAACK,IAAD,EAAU;AACZR,4BAAQQ,IAAR;AACH,iBAHL,EAGOH,KAHP,CAGa,UAACC,GAAD,EAAS;AACdL,2BAAOK,GAAP;AACH,iBALL;AAMH,aAPM,CAAP;AAQH,SApBE;AAqBHG,sBAAc,sBAACZ,IAAD,QAAoBL,OAApB,EAA6BC,IAA7B,EAAsC;AAAA,gBAA7BiB,OAA6B,QAA7BA,OAA6B;;AAChD,mBAAO,IAAIX,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCf,mBAAGgB,UAAH,CAAc,CAAC,KAAD,EAAQ,KAAR,CAAd,EACKC,IADL,CACU,UAACK,IAAD,EAAU;AACZ,wBAAMG,eAAeC,iBAAEC,MAAF,CAASL,IAAT,EAAe,EAAEE,SAASA,OAAX,EAAf,CAArB;AACAV,4BAAQW,YAAR;AACH,iBAJL,EAION,KAJP,CAIa,UAACC,GAAD,EAAS;AACdL,2BAAOK,GAAP;AACH,iBANL;AAOH,aARM,CAAP;AASH;AA/BE,KAdO;AA+CdQ,cAAU;AACNC,gBAAQ,gBAAClB,IAAD,SAAkBL,OAAlB,EAA2BC,IAA3B,EAAoC;AAAA,gBAA3BuB,KAA2B,SAA3BA,KAA2B;;AACxC,mBAAO,IAAIjB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCf,mBAAG+B,SAAH,CAAaD,KAAb,EACKb,IADL,CACU,UAACe,KAAD,EAAW;AACblB,4BAAQkB,KAAR;AACH,iBAHL,EAGOb,KAHP,CAGa,UAACC,GAAD,EAAS;AACdL,2BAAOK,GAAP;AACH,iBALL;AAMH,aAPM,CAAP;AAQH,SAVK;AAWNa,mBAAW,mBAACtB,IAAD,SAGL;AAAA,gBAFFuB,KAEE,SAFFA,KAEE;AAAA,gBADFJ,KACE,SADFA,KACE;;AACF,mBAAO,cAAP;AACH;AAhBK;;AA/CI,CAAlB;AAoEAK,QAAQC,GAAR,CAAY,iCAAZ;kBACelC,S","file":"resolvers.js","sourcesContent":["import async from 'async';\r\nimport _ from 'lodash';\r\n\r\nimport PETSDB from '../data/dbmanager';\r\n\r\nconst db = new PETSDB();\r\n\r\nconst resolvers = {\r\n    Pet: {\r\n        __resolveType(pet, context, info) {\r\n            if (pet.type === 'CAT') {\r\n                return 'Cat';\r\n            }\r\n\r\n            if (pet.type === 'DOG') {\r\n                return 'Dog';\r\n            }\r\n\r\n            return null;\r\n        },\r\n    },\r\n    Query: {\r\n        getOwners: (root, args, context, info) => {\r\n            return new Promise((resolve, reject) => {\r\n                db.readModels(['OWNER'])\r\n                    .then((owners) => {\r\n                        resolve(owners);\r\n                    }).catch((err) => {\r\n                        reject(err);\r\n                    });\r\n            });\r\n        },\r\n        getPets: (root, args, context, info) => {\r\n            return new Promise((resolve, reject) => {\r\n                db.readModels(['DOG', 'CAT'])\r\n                    .then((pets) => {\r\n                        resolve(pets);\r\n                    }).catch((err) => {\r\n                        reject(err);\r\n                    });\r\n            });\r\n        },\r\n        getOwnerPets: (root, { ownerId }, context, info) => {\r\n            return new Promise((resolve, reject) => {\r\n                db.readModels(['DOG', 'CAT'])\r\n                    .then((pets) => {\r\n                        const filteredPets = _.filter(pets, { ownerId: ownerId });\r\n                        resolve(filteredPets);\r\n                    }).catch((err) => {\r\n                        reject(err);\r\n                    });\r\n            });\r\n        }\r\n    },\r\n    Mutation: {\r\n        addPet: (root, { input }, context, info) => {\r\n            return new Promise((resolve, reject) => {\r\n                db.saveModel(input)\r\n                    .then((model) => {\r\n                        resolve(model);\r\n                    }).catch((err) => {\r\n                        reject(err);\r\n                    });\r\n            });\r\n        },\r\n        updatePet: (root, {\r\n            petId,\r\n            input\r\n        }) => {\r\n            return 'Hello world!';\r\n        }\r\n    }\r\n\r\n\r\n};\r\nconsole.log('-- end of defining resolvers --');\r\nexport default resolvers;"]}