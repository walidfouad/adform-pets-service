{"version":3,"sources":["../../src/schema/resolvers.js"],"names":["db","DBManager","resolvers","Pet","__resolveType","pet","context","info","type","Query","getOwners","root","args","Promise","resolve","reject","readModels","then","owners","catch","err","getPets","pets","getOwnerPets","ownerId","filteredPets","_","filter","Mutation","addPet","input","owner","find","id","Error","createNewModel","model","updatePet","petId","dogs","getDogs","dog","cats","getCats","cat","updateModel","console","log"],"mappings":"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","file":"resolvers.js","sourcesContent":["import _ from 'lodash';\r\nimport DBManager from '../data/dbmanager';\r\n\r\nconst db = new DBManager();\r\n\r\nconst resolvers = {\r\n    Pet: {\r\n        // this is added to resolve interface issue (decide which child type to resolve)\r\n        __resolveType(pet, context, info) {\r\n            if (pet.type === 'CAT') {\r\n                return 'Cat';\r\n            }\r\n\r\n            if (pet.type === 'DOG') {\r\n                return 'Dog';\r\n            }\r\n\r\n            return null;\r\n        },\r\n    },\r\n    Query: {\r\n        getOwners: (root, args, context, info) => {\r\n            return new Promise((resolve, reject) => {\r\n                db.readModels(['OWNER'])\r\n                    .then((owners) => {\r\n                        resolve(owners);\r\n                    }).catch((err) => {\r\n                        reject(err);\r\n                    });\r\n            });\r\n        },\r\n        getPets: (root, args, context, info) => {\r\n            return new Promise((resolve, reject) => {\r\n                db.readModels(['DOG', 'CAT'])\r\n                    .then((pets) => {\r\n                        resolve(pets);\r\n                    }).catch((err) => {\r\n                        reject(err);\r\n                    });\r\n            });\r\n        },\r\n        getOwnerPets: (root, { ownerId }, context, info) => {\r\n            return new Promise((resolve, reject) => {\r\n                db.readModels(['DOG', 'CAT'])\r\n                    .then((pets) => {\r\n                        const filteredPets = _.filter(pets, { ownerId: ownerId });\r\n                        resolve(filteredPets);\r\n                    }).catch((err) => {\r\n                        reject(err);\r\n                    });\r\n            });\r\n        }\r\n    },\r\n    Mutation: {\r\n        addPet: (root, { input }, context, info) => {\r\n            return new Promise((resolve, reject) => {\r\n                if (input.ownerId) {\r\n                    const owners = db.getOwners();\r\n                    const owner = _.find(owners, { id: input.ownerId });\r\n                    if (!owner) {\r\n                        return reject(new Error('Owner Id does not exist'));\r\n                    }\r\n                }\r\n\r\n                db.createNewModel(input)\r\n                    .then((model) => {\r\n                        resolve(model);\r\n                    }).catch((err) => {\r\n                        reject(err);\r\n                    });\r\n            });\r\n        },\r\n        updatePet: (root, {\r\n            petId,\r\n            input\r\n        }) => {\r\n            return new Promise((resolve, reject) => {\r\n                if (input.ownerId) {\r\n                    const owners = db.getOwners();\r\n                    const owner = _.find(owners, { id: input.ownerId });\r\n                    if (!owner) {\r\n                        return reject(new Error('Owner Id does not exist'));\r\n                    }\r\n                }\r\n\r\n                const dogs = db.getDogs();\r\n                const dog = _.find(dogs, { id: petId });\r\n\r\n                const cats = db.getCats();\r\n                const cat = _.find(cats, { id: petId });\r\n\r\n                if (!dog && !cat) {\r\n                    return reject(new Error('Pet Id does not exist'));\r\n                }\r\n\r\n                input.type = dog ? 'DOG' : 'CAT';\r\n\r\n                db.updateModel(petId, input)\r\n                    .then((model) => {\r\n                        resolve(model);\r\n                    }).catch((err) => {\r\n                        reject(err);\r\n                    });\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n};\r\nconsole.log('-- end of defining resolvers --');\r\nexport default resolvers;"]}