{"version":3,"sources":["../../src/schema/resolvers.js"],"names":["db","DBManager","resolvers","Pet","__resolveType","pet","context","info","type","Query","getOwners","root","args","Promise","resolve","reject","readModels","then","owners","ownerWithPets","forEach","owner","pets","ownerPets","id","push","catch","err","getPets","petsWithOwners","getOwner","ownerId","getOwnerPets","readSpecificModel","Mutation","addPet","input","_","find","Error","createNewModel","model","updatePet","petId","dogs","getDogs","dog","cats","getCats","cat","updateModel","console","log"],"mappings":"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","file":"resolvers.js","sourcesContent":["import _ from 'lodash';\r\nimport DBManager from '../data/dbmanager';\r\n\r\nconst db = new DBManager();\r\n\r\nconst resolvers = {\r\n    Pet: {\r\n        // this is added to resolve interface issue (decide which child type to resolve)\r\n        __resolveType(pet, context, info) {\r\n            if (pet.type === 'CAT') {\r\n                return 'Cat';\r\n            }\r\n\r\n            if (pet.type === 'DOG') {\r\n                return 'Dog';\r\n            }\r\n\r\n            return null;\r\n        }\r\n    },\r\n    Query: {\r\n        getOwners: (root, args, context, info) => {\r\n            return new Promise((resolve, reject) => {\r\n                db.readModels(['OWNER'])\r\n                    .then((owners) => {\r\n\r\n                        let ownerWithPets = [];\r\n                        owners.forEach(owner => {\r\n                            owner.pets = db.ownerPets(owner.id);\r\n                            ownerWithPets.push(owner);\r\n                        });\r\n\r\n                        resolve(ownerWithPets);\r\n                    }).catch((err) => {\r\n                        reject(err);\r\n                    });\r\n            });\r\n        },\r\n        getPets: (root, args, context, info) => {\r\n            return new Promise((resolve, reject) => {\r\n                db.readModels(['DOG', 'CAT'])\r\n                    .then((pets) => {\r\n                        let petsWithOwners = [];\r\n                        pets.forEach(pet => {\r\n                            pet.owner = db.getOwner(pet.ownerId);\r\n                            petsWithOwners.push(pet);\r\n                        });\r\n\r\n                        resolve(petsWithOwners);\r\n                    }).catch((err) => {\r\n                        reject(err);\r\n                    });\r\n            });\r\n        },\r\n        getOwnerPets: (root, { ownerId }, context, info) => {\r\n            return new Promise((resolve, reject) => {\r\n                db.readSpecificModel(ownerId, 'OWNER')\r\n                    .then((owner) => {\r\n                        owner.pets = db.ownerPets(ownerId);\r\n                        resolve(owner);\r\n\r\n                    }).catch((err) => {\r\n                        reject(err);\r\n                    });\r\n            });\r\n        }\r\n    },\r\n    Mutation: {\r\n        addPet: (root, { input }, context, info) => {\r\n            return new Promise((resolve, reject) => {\r\n                if (input.ownerId) {\r\n                    const owners = db.getOwners();\r\n                    const owner = _.find(owners, { id: input.ownerId });\r\n                    if (!owner) {\r\n                        return reject(new Error('Owner Id does not exist'));\r\n                    }\r\n                }\r\n\r\n                db.createNewModel(input)\r\n                    .then((model) => {\r\n                        resolve(model);\r\n                    }).catch((err) => {\r\n                        reject(err);\r\n                    });\r\n            });\r\n        },\r\n        updatePet: (root, {\r\n            petId,\r\n            input\r\n        }) => {\r\n            return new Promise((resolve, reject) => {\r\n                if (input.ownerId) {\r\n                    const owners = db.getOwners();\r\n                    const owner = _.find(owners, { id: input.ownerId });\r\n                    if (!owner) {\r\n                        return reject(new Error('Owner Id does not exist'));\r\n                    }\r\n                }\r\n\r\n                const dogs = db.getDogs();\r\n                const dog = _.find(dogs, { id: petId });\r\n\r\n                const cats = db.getCats();\r\n                const cat = _.find(cats, { id: petId });\r\n\r\n                if (!dog && !cat) {\r\n                    return reject(new Error('Pet Id does not exist'));\r\n                }\r\n\r\n                input.type = dog ? 'DOG' : 'CAT';\r\n\r\n                db.updateModel(petId, input)\r\n                    .then((model) => {\r\n                        resolve(model);\r\n                    }).catch((err) => {\r\n                        reject(err);\r\n                    });\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n};\r\nconsole.log('-- end of defining resolvers --');\r\nexport default resolvers;"]}