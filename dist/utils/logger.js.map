{"version":3,"sources":["../../src/utils/logger.js"],"names":["logger","winston","createLogger","level","format","json","defaultMeta","service","transports","File","filename","path","join","process","env","NODE_ENV","add","Console","simple","logDirectory","appRoot","mkdir","fs","existsSync","mkdirSync","accessLogStream","createWriteStream","flags"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAGA,IAAMA,SAASC,kBAAQC,YAAR,CAAqB;AAChCC,WAAO,MADyB;AAEhCC,YAAQH,kBAAQG,MAAR,CAAeC,IAAf,EAFwB;AAGhCC,iBAAa,EAAEC,SAAS,cAAX,EAHmB;AAIhCC,gBAAY,CACR,IAAIP,kBAAQO,UAAR,CAAmBC,IAAvB,CAA4B,EAAEC,UAAUC,eAAKC,IAAL,CAAU,KAAV,EAAiB,WAAjB,CAAZ,EAA2CT,OAAO,OAAlD,EAA5B,CADQ,EAER,IAAIF,kBAAQO,UAAR,CAAmBC,IAAvB,CAA4B,EAAEC,UAAUC,eAAKC,IAAL,CAAU,KAAV,EAAiB,cAAjB,CAAZ,EAA5B,CAFQ;AAJoB,CAArB,CAAf;;AAUA,IAAIC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACvCf,WAAOgB,GAAP,CAAW,IAAIf,kBAAQO,UAAR,CAAmBS,OAAvB,CAA+B;AACtCb,gBAAQH,kBAAQG,MAAR,CAAec,MAAf;AAD8B,KAA/B,CAAX;AAGH;;AAED,IAAMC,eAAeR,eAAKC,IAAL,CAAUQ,sBAAQT,IAAlB,EAAwB,KAAxB,CAArB;;AAEA,IAAMU,QAAQ,SAARA,KAAQ,CAACV,IAAD,EAAU;AACpB,WAAOW,aAAGC,UAAH,CAAcZ,IAAd,KAAuBW,aAAGE,SAAH,CAAab,IAAb,CAA9B;AACH,CAFD;;AAIAU,MAAMF,YAAN;;AAEA,IAAMM,kBAAkBH,aAAGI,iBAAH,CAAqBf,eAAKC,IAAL,CAAUO,YAAV,EAAwB,YAAxB,CAArB,EAA4D,EAAEQ,OAAO,GAAT,EAA5D,CAAxB;;QAESF,e,GAAAA,e;kBACMzB,M","file":"logger.js","sourcesContent":["import appRoot from 'app-root-path';\r\nimport winston from 'winston';\r\nimport path from 'path';\r\nimport fs from 'fs';\r\n\r\n\r\nconst logger = winston.createLogger({\r\n    level: 'info',\r\n    format: winston.format.json(),\r\n    defaultMeta: { service: 'user-service' },\r\n    transports: [\r\n        new winston.transports.File({ filename: path.join('log', 'error.log'), level: 'error' }),\r\n        new winston.transports.File({ filename: path.join('log', 'combined.log') })\r\n    ]\r\n});\r\n\r\nif (process.env.NODE_ENV !== 'production') {\r\n    logger.add(new winston.transports.Console({\r\n        format: winston.format.simple()\r\n    }));\r\n}\r\n\r\nconst logDirectory = path.join(appRoot.path, 'log');\r\n\r\nconst mkdir = (path) => {\r\n    return fs.existsSync(path) || fs.mkdirSync(path);\r\n};\r\n\r\nmkdir(logDirectory);\r\n\r\nconst accessLogStream = fs.createWriteStream(path.join(logDirectory, 'access.log'), { flags: 'a' });\r\n\r\nexport { accessLogStream };\r\nexport default logger;"]}